import telebot
import json
import random
import time
from datetime import datetime, timedelta
import os

BOT_TOKEN = "8138804925:AAFQdS-7N_7LiM4S6cCIpAMJn98EaE4TV0I"
bot = telebot.TeleBot(BOT_TOKEN)

DATA_FILE = "players_data.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_player_data(user_id):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {
            "name": "Player",
            "dollars": 0,
            "vip": False,
            "iron": 0,
            "bronze": 0,
            "silver": 0,
            "gold": 0,
            "mine": "–ù–µ—Ç",
            "bronze_mine": False,
            "silver_mine": False,
            "gold_mine": False,
            "last_dig": 0,
            "last_bonus": 0,
            "last_vip_dig": 0,
            "last_vip_bonus": 0,
            "last_mine_dig": 0,
            "gift_cases": 0,
            "bronze_cases": 0,
            "silver_cases": 0,
            "gold_cases": 0
        }
        save_data(data)
    return data[str(user_id)]

def update_player_data(user_id, player_data):
    data = load_data()
    player_data['dollars'] = round(player_data['dollars'], 2)
    data[str(user_id)] = player_data
    save_data(data)

def format_number(num):
    if isinstance(num, float):
        if num == int(num):
            return str(int(num))
        else:
            return str(round(num, 2))
    return str(num)

@bot.message_handler(func=lambda message: message.text.lower() == '–ø–æ–º–æ—â—å')
def help_command(message):
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("ü§ñ –ö–æ–º–∞–Ω–¥—ã", callback_data="help_commands")
    btn2 = telebot.types.InlineKeyboardButton("üëë –í–∏–ø", callback_data="help_vip")
    btn3 = telebot.types.InlineKeyboardButton("üí∞ –ë–æ–Ω—É—Å", callback_data="help_bonus")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.send_message(message.chat.id, "*–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –†–æ–±! –ó–∞–π–¥–∏ –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!*", 
                     parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "help_commands")
def help_commands_callback(call):
    text = """*–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ - —è —Å–¥–µ–ª–∞–ª —Å–ø–∏—Å–æ–∫, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∏–∂–µ*

*–ó–ê–†–ê–ë–û–¢–û–ö*
–ö–æ–ø–∞—Ç—å - –≤—ã–∫–æ–ø–∞—Ç—å –∂–µ–ª–µ–∑–æ
–¢—Ä–µ–π–¥ - –æ–±–º–µ–Ω–Ω–∏–∫ –≤—Å–µ–≥–æ –∫–∞—Ä—å–µ—Ä–∞
–û–±–º–µ–Ω—è—Ç—å `(–∫–æ–ª–≤–æ)` - –æ–±–º–µ–Ω—è—Ç—å –∂–µ–ª–µ–∑–æ –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã
–ö—É–ø–∏—Ç—å –≤–∏–ø - –∫—É–ø–∏—Ç—å –≤–∏–ø –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é
–ö–∞–∑–∏–Ω–æ `(—Å—Ç–∞–≤–∫–∞)` - —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ
–î–∞—Ç—å `(—Å–∫–æ–ª—å–∫–æ)` - –ø–µ—Ä–µ–¥–∞—á–∞ –¥–µ–Ω–µ–≥

*–ü–†–û–§–ò–õ–¨*
–ü—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
–ù–∏–∫ `[–Ω–æ–≤–æ–µ –∏–º—è]` - –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è

*–ö–ï–ô–°–´*
–ö–µ–π—Å—ã - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ–π—Å–∞—Ö
–ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å `(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)` - –∫—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑ –∫–µ–π—Å
–ö—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å `(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)` - –∫—É–ø–∏—Ç—å —Å–∏–ª—å–≤–µ—Ä –∫–µ–π—Å
–ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å `(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)` - –∫—É–ø–∏—Ç—å –≥–æ–ª–¥ –∫–µ–π—Å
–û—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π/—Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π/–∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å - –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

*–ß–ê–°–¢–ù–´–ï –®–ê–•–¢–´*
–ß–∞—Å—Ç–Ω—ã–µ —à–∞—Ö—Ç—ã - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å—Ç–Ω—ã—Ö —à–∞—Ö—Ç–∞—Ö
–ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—É—é/—Å–µ—Ä–µ–±—Ä—è–Ω–Ω—É—é/–∑–æ–ª–æ—Ç—É—é —à–∞—Ö—Ç—É - –∫—É–ø–∏—Ç—å —á–∞—Å—Ç–Ω—É—é —à–∞—Ö—Ç—É
–ö–æ–ø–∞—Ç—å –≤ —à–∞—Ö—Ç–µ - –∫–æ–ø–∞—Ç—å –≤ —á–∞—Å—Ç–Ω–æ–π —à–∞—Ö—Ç–µ

**–ö–†–ê–§–¢**
–ö—Ä–∞—Ñ—Ç—ã - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∞—Ñ—Ç–∞—Ö
–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å - —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å
–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å - —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å
–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å - —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å
–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å - —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å"""
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("ü§ñ –ö–æ–º–∞–Ω–¥—ã", callback_data="help_commands")
    btn2 = telebot.types.InlineKeyboardButton("üëë –í–∏–ø", callback_data="help_vip")
    btn3 = telebot.types.InlineKeyboardButton("üí∞ –ë–æ–Ω—É—Å", callback_data="help_bonus")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "help_vip")
def help_vip_callback(call):
    text = """*VIP —Å—Ç–∞—Ç—É—Å:*

*‚ùì –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤ —Ç—Ä–µ–π–¥–µ*

*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*

*–í–∏–ø —à–∞—Ö—Ç–∞:*
–í–∏–ø –∫–æ–ø–∞—Ç—å - –∫–æ–ø–∞—Ç—å –≤ –≤–∏–ø —à–∞—Ö—Ç–µ

*–í–∏–ø –±–æ–Ω—É—Å:*
–í–∏–ø –±–æ–Ω—É—Å - –ø–æ–ª—É—á–∏—Ç—å –≤–∏–ø –±–æ–Ω—É—Å

‚ùó –ö—É–ª–¥–∞—É–Ω –∫–æ–º–∞–Ω–¥—ã "–ö–æ–ø–∞—Ç—å" —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –≤ 2 —Ä–∞–∑–∞ –¥–æ 1 –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥.

**–ù–∞ —ç—Ç–æ–º –≤—Å—ë!**"""
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("ü§ñ –ö–æ–º–∞–Ω–¥—ã", callback_data="help_commands")
    btn2 = telebot.types.InlineKeyboardButton("üëë –í–∏–ø", callback_data="help_vip")
    btn3 = telebot.types.InlineKeyboardButton("üí∞ –ë–æ–Ω—É—Å", callback_data="help_bonus")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "help_bonus")
def help_bonus_callback(call):
    text = """*–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!*

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É "–ë–æ–Ω—É—Å", —Ç–æ–≥–¥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å!
*–£–¥–∞—á–∏!*"""
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("ü§ñ –ö–æ–º–∞–Ω–¥—ã", callback_data="help_commands")
    btn2 = telebot.types.InlineKeyboardButton("üëë –í–∏–ø", callback_data="help_vip")
    btn3 = telebot.types.InlineKeyboardButton("üí∞ –ë–æ–Ω—É—Å", callback_data="help_bonus")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text.lower() == '—Ç–æ–ø')
def top_command(message):
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("üí≤ –î–æ–ª–ª–∞—Ä—ã", callback_data="top_dollars")
    btn2 = telebot.types.InlineKeyboardButton("‚öôÔ∏è –ñ–µ–ª–µ–∑–æ", callback_data="top_iron")
    btn3 = telebot.types.InlineKeyboardButton("ü•â –ë—Ä–æ–Ω–∑–∞", callback_data="top_bronze")
    btn4 = telebot.types.InlineKeyboardButton("ü•à –°–µ—Ä–µ–±—Ä–æ", callback_data="top_silver")
    btn5 = telebot.types.InlineKeyboardButton("ü™ô –ó–æ–ª–æ—Ç–æ", callback_data="top_gold")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    
    bot.send_message(message.chat.id, "*üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤!*\n*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:*", 
                     parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "top_dollars")
def top_dollars_callback(call):
    data = load_data()
    players = [(player_data['name'], player_data['dollars']) for player_data in data.values()]
    players.sort(key=lambda x: x[1], reverse=True)
    
    text = "*üí≤ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –¥–æ–ª–ª–∞—Ä–∞–º:*\n\n"
    for i, (name, amount) in enumerate(players[:10], 1):
        text += f"`{i}.` *{name}* - `{format_number(amount)}` üí≤\n"
    
    if not players:
        text += "*–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!*"
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("üí≤ –î–æ–ª–ª–∞—Ä—ã", callback_data="top_dollars")
    btn2 = telebot.types.InlineKeyboardButton("‚öôÔ∏è –ñ–µ–ª–µ–∑–æ", callback_data="top_iron")
    btn3 = telebot.types.InlineKeyboardButton("ü•â –ë—Ä–æ–Ω–∑–∞", callback_data="top_bronze")
    btn4 = telebot.types.InlineKeyboardButton("ü•à –°–µ—Ä–µ–±—Ä–æ", callback_data="top_silver")
    btn5 = telebot.types.InlineKeyboardButton("ü™ô –ó–æ–ª–æ—Ç–æ", callback_data="top_gold")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "top_iron")
def top_iron_callback(call):
    data = load_data()
    players = [(player_data['name'], player_data['iron']) for player_data in data.values()]
    players.sort(key=lambda x: x[1], reverse=True)
    
    text = "*‚öôÔ∏è –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∂–µ–ª–µ–∑—É:*\n\n"
    for i, (name, amount) in enumerate(players[:10], 1):
        text += f"`{i}.` *{name}* - `{format_number(amount)}` ‚öôÔ∏è\n"
    
    if not players:
        text += "*–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!*"
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("üí≤ –î–æ–ª–ª–∞—Ä—ã", callback_data="top_dollars")
    btn2 = telebot.types.InlineKeyboardButton("‚öôÔ∏è –ñ–µ–ª–µ–∑–æ", callback_data="top_iron")
    btn3 = telebot.types.InlineKeyboardButton("ü•â –ë—Ä–æ–Ω–∑–∞", callback_data="top_bronze")
    btn4 = telebot.types.InlineKeyboardButton("ü•à –°–µ—Ä–µ–±—Ä–æ", callback_data="top_silver")
    btn5 = telebot.types.InlineKeyboardButton("ü™ô –ó–æ–ª–æ—Ç–æ", callback_data="top_gold")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "top_bronze")
def top_bronze_callback(call):
    data = load_data()
    players = [(player_data['name'], player_data['bronze']) for player_data in data.values()]
    players.sort(key=lambda x: x[1], reverse=True)
    
    text = "*ü•â –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±—Ä–æ–Ω–∑–µ:*\n\n"
    for i, (name, amount) in enumerate(players[:10], 1):
        text += f"`{i}.` *{name}* - `{format_number(amount)}` ü•â\n"
    
    if not players:
        text += "*–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!*"
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("üí≤ –î–æ–ª–ª–∞—Ä—ã", callback_data="top_dollars")
    btn2 = telebot.types.InlineKeyboardButton("‚öôÔ∏è –ñ–µ–ª–µ–∑–æ", callback_data="top_iron")
    btn3 = telebot.types.InlineKeyboardButton("ü•â –ë—Ä–æ–Ω–∑–∞", callback_data="top_bronze")
    btn4 = telebot.types.InlineKeyboardButton("ü•à –°–µ—Ä–µ–±—Ä–æ", callback_data="top_silver")
    btn5 = telebot.types.InlineKeyboardButton("ü™ô –ó–æ–ª–æ—Ç–æ", callback_data="top_gold")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "top_silver")
def top_silver_callback(call):
    data = load_data()
    players = [(player_data['name'], player_data['silver']) for player_data in data.values()]
    players.sort(key=lambda x: x[1], reverse=True)
    
    text = "*ü•à –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–µ—Ä–µ–±—Ä—É:*\n\n"
    for i, (name, amount) in enumerate(players[:10], 1):
        text += f"`{i}.` *{name}* - `{format_number(amount)}` ü•à\n"
    
    if not players:
        text += "*–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!*"
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("üí≤ –î–æ–ª–ª–∞—Ä—ã", callback_data="top_dollars")
    btn2 = telebot.types.InlineKeyboardButton("‚öôÔ∏è –ñ–µ–ª–µ–∑–æ", callback_data="top_iron")
    btn3 = telebot.types.InlineKeyboardButton("ü•â –ë—Ä–æ–Ω–∑–∞", callback_data="top_bronze")
    btn4 = telebot.types.InlineKeyboardButton("ü•à –°–µ—Ä–µ–±—Ä–æ", callback_data="top_silver")
    btn5 = telebot.types.InlineKeyboardButton("ü™ô –ó–æ–ª–æ—Ç–æ", callback_data="top_gold")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "top_gold")
def top_gold_callback(call):
    data = load_data()
    players = [(player_data['name'], player_data['gold']) for player_data in data.values()]
    players.sort(key=lambda x: x[1], reverse=True)
    
    text = "*ü™ô –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∑–æ–ª–æ—Ç—É:*\n\n"
    for i, (name, amount) in enumerate(players[:10], 1):
        text += f"`{i}.` *{name}* - `{format_number(amount)}` ü™ô\n"
    
    if not players:
        text += "*–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!*"
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("üí≤ –î–æ–ª–ª–∞—Ä—ã", callback_data="top_dollars")
    btn2 = telebot.types.InlineKeyboardButton("‚öôÔ∏è –ñ–µ–ª–µ–∑–æ", callback_data="top_iron")
    btn3 = telebot.types.InlineKeyboardButton("ü•â –ë—Ä–æ–Ω–∑–∞", callback_data="top_bronze")
    btn4 = telebot.types.InlineKeyboardButton("ü•à –°–µ—Ä–µ–±—Ä–æ", callback_data="top_silver")
    btn5 = telebot.types.InlineKeyboardButton("ü™ô –ó–æ–ª–æ—Ç–æ", callback_data="top_gold")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text.lower() == '–ø—Ä–æ—Ñ–∏–ª—å')
def profile_command(message):
    player = get_player_data(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é
    if message.from_user.id == 7143373003:
        privilege = "üëÆüèø‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω"
    elif player["vip"]:
        privilege = "üëë –í–∏–ø"
    else:
        privilege = "üë§ –ò–≥—Ä–æ–∫"
    
    text = f"""üìõ *–ò–º—è:* `{player['name']}`
üí≤ *–î–æ–ª–ª–∞—Ä—ã:* `{format_number(player['dollars'])}`
üëë *–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è:* {privilege}

‚öôÔ∏è *–ñ–µ–ª–µ–∑–æ:* `{format_number(player['iron'])}`
ü•â *–ë—Ä–æ–Ω–∑–∞:* `{format_number(player['bronze'])}`
ü•à *–°–µ—Ä–µ–±—Ä–æ:* `{format_number(player['silver'])}`
ü•á *–ó–æ–ª–æ—Ç–æ:* `{format_number(player['gold'])}`

üèó *–ë—Ä–æ–Ω–∑–æ–≤–∞—è —à–∞—Ö—Ç–∞:* {'‚úîÔ∏è' if player.get('bronze_mine', False) else '‚ùå'}
üèó *–°–µ—Ä–µ–±—Ä—è–Ω–Ω–∞—è —à–∞—Ö—Ç–∞:* {'‚úîÔ∏è' if player.get('silver_mine', False) else '‚ùå'}
üèó *–ó–æ–ª–æ—Ç–∞—è —à–∞—Ö—Ç–∞:* {'‚úîÔ∏è' if player.get('gold_mine', False) else '‚ùå'}

*‚ùì –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è, –≤–≤–µ–¥–∏—Ç–µ: –Ω–∏–∫ [–Ω–æ–≤–æ–µ –∏–º—è]*"""
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower().startswith('–Ω–∏–∫'))
def change_name_command(message):
    try:
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –Ω–∏–∫ [–Ω–æ–≤–æ–µ –∏–º—è]*", parse_mode='Markdown')
            return
            
        new_name = parts[2]
        if len(new_name) > 30:
            bot.send_message(message.chat.id, "*–î–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤* `30` *–±—É–∫–≤!*", parse_mode='Markdown')
            return
        
        player = get_player_data(message.from_user.id)
        player['name'] = new_name
        update_player_data(message.from_user.id, player)
        
        bot.send_message(message.chat.id, f"*–í—ã —Å–º–µ–Ω–∏–ª–∏ –∏–º—è, —Ç–µ–ø–µ—Ä—å –≤–∞—Å –∑–æ–≤—É—Ç {new_name}!*", parse_mode='Markdown')
    except Exception:
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –Ω–∏–∫ [–Ω–æ–≤–æ–µ –∏–º—è]*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–∫–æ–ø–∞—Ç—å')
def dig_command(message):
    player = get_player_data(message.from_user.id)
    current_time = time.time()
    
    cooldown = 90 if player['vip'] else 180
    
    if current_time - player['last_dig'] < cooldown:
        remaining_time = cooldown - (current_time - player['last_dig'])
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        bot.send_message(message.chat.id, f"*–í—ã —É—Å—Ç–∞–ª–∏, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –∏–¥—Ç–∏ –∫–æ–ø–∞—Ç—å —á–µ—Ä–µ–∑* `{minutes}` *–º–∏–Ω—É—Ç* `{seconds}` *—Å–µ–∫—É–Ω–¥*", parse_mode='Markdown')
        return
    
    iron_found = random.randint(5, 20)
    player['iron'] += iron_found
    player['last_dig'] = current_time
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, f"*–í—ã –∑–∞—à–ª–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é —à–∞—Ö—Ç—ã, –∏ –≤—ã–∫–æ–ø–∞–ª–∏* `{iron_found}` *–∂–µ–ª–µ–∑–∞!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower().startswith('–æ–±–º–µ–Ω—è—Ç—å'))
def exchange_command(message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û–±–º–µ–Ω—è—Ç—å –∂–µ–ª–µ–∑–æ/–±—Ä–æ–Ω–∑—É/—Å–µ—Ä–µ–±—Ä–æ/–∑–æ–ª–æ—Ç–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)*", parse_mode='Markdown')
            return
            
        resource = parts[1].lower()
        amount = int(parts[2])
        
        if amount <= 0:
            bot.send_message(message.chat.id, "*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!*", parse_mode='Markdown')
            return
        
        player = get_player_data(message.from_user.id)
        
        if resource in ['–∂–µ–ª–µ–∑–æ', '–∂–µ–ª–µ–∑–∞']:
            if player['iron'] >= amount:
                player['iron'] -= amount
                earned = round(amount * 0.2, 2)
                player['dollars'] += earned
                update_player_data(message.from_user.id, player)
                bot.send_message(message.chat.id, f"**–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏** `{amount}` **–∂–µ–ª–µ–∑–∞ –Ω–∞** `{format_number(earned)}` **–¥–æ–ª–ª–∞—Ä–æ–≤**", parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ–ª–µ–∑–∞!*", parse_mode='Markdown')
        
        elif resource in ['–±—Ä–æ–Ω–∑—É', '–±—Ä–æ–Ω–∑—ã']:
            if player['bronze'] >= amount:
                player['bronze'] -= amount
                earned = round(amount * 0.5, 2)
                player['dollars'] += earned
                update_player_data(message.from_user.id, player)
                bot.send_message(message.chat.id, f"**–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏** `{amount}` **–±—Ä–æ–Ω–∑—ã –Ω–∞** `{format_number(earned)}` **–¥–æ–ª–ª–∞—Ä–æ–≤**", parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—Ä–æ–Ω–∑—ã!*", parse_mode='Markdown')
        
        elif resource in ['—Å–µ—Ä–µ–±—Ä–æ', '—Å–µ—Ä–µ–±—Ä–∞']:
            if player['silver'] >= amount:
                player['silver'] -= amount
                earned = round(amount * 1, 2)
                player['dollars'] += earned
                update_player_data(message.from_user.id, player)
                bot.send_message(message.chat.id, f"**–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏** `{amount}` **—Å–µ—Ä–µ–±—Ä–∞ –Ω–∞** `{format_number(earned)}` **–¥–æ–ª–ª–∞—Ä–æ–≤**", parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–µ–±—Ä–∞!*", parse_mode='Markdown')
        
        elif resource in ['–∑–æ–ª–æ—Ç–æ', '–∑–æ–ª–æ—Ç–∞']:
            if player['gold'] >= amount:
                player['gold'] -= amount
                earned = round(amount * 3, 2)
                player['dollars'] += earned
                update_player_data(message.from_user.id, player)
                bot.send_message(message.chat.id, f"**–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏** `{amount}` **–∑–æ–ª–æ—Ç–∞ –Ω–∞** `{format_number(earned)}` **–¥–æ–ª–ª–∞—Ä–æ–≤**", parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!*", parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "*–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å! –î–æ—Å—Ç—É–ø–Ω—ã–µ: –∂–µ–ª–µ–∑–æ, –±—Ä–æ–Ω–∑—É, —Å–µ—Ä–µ–±—Ä–æ, –∑–æ–ª–æ—Ç–æ*", parse_mode='Markdown')
        
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û–±–º–µ–Ω—è—Ç—å –∂–µ–ª–µ–∑–æ/–±—Ä–æ–Ω–∑—É/—Å–µ—Ä–µ–±—Ä–æ/–∑–æ–ª–æ—Ç–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–±–æ–Ω—É—Å')
def bonus_command(message):
    player = get_player_data(message.from_user.id)
    current_time = time.time()
    
    if current_time - player['last_bonus'] < 86400:
        remaining_time = 86400 - (current_time - player['last_bonus'])
        hours = int(remaining_time // 3600)
        minutes = int((remaining_time % 3600) // 60)
        bot.send_message(message.chat.id, f"*–Ø –Ω–µ –±–æ–≥–∞—á, –ø–æ–¥–æ–∂–¥–∏* `{hours}` *—á–∞—Å–æ–≤* `{minutes}` *–º–∏–Ω—É—Ç*", parse_mode='Markdown')
        return
    
    player['gift_cases'] += 1
    player['last_bonus'] = current_time
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "üòÑ *–í—ã –ø–æ–ª—É—á–∏–ª–∏* `1` *–ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å!*\n*–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å')
def open_gift_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['gift_cases'] <= 0:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤!*", parse_mode='Markdown')
        return
    
    player['gift_cases'] -= 1
    reward = random.randint(1, 12)
    player['dollars'] += reward
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, f"*–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏* `{reward}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–∫–µ–π—Å—ã')
def cases_command(message):
    player = get_player_data(message.from_user.id)
    
    text = f"""*üì¶ –ö–µ–π—Å—ã!*

‚ùóÔ∏è*–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ* `1` *–∫–µ–π—Å–∞ –∑–∞ —Ä–∞–∑!*

*1. –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å, –º–æ–∂–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤ –±–æ–Ω—É—Å–µ, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['gift_cases']}`

*2. –ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å:* `50`$*, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['bronze_cases']}`

*3. –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å:* `100`$*, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['silver_cases']}`

*4. –ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å:* `300`$*, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['gold_cases']}`

*–ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å - –ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å (–∫–æ–ª–≤–æ)*
*–ö—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å - –ö—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å (–∫–æ–ª–≤–æ)*
*–ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å - –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å (–∫–æ–ª–≤–æ)*"""
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å'))
def buy_bronze_case(message):
    try:
        parts = message.text.split()
        amount = int(parts[3]) if len(parts) > 3 else 1
        
        if amount <= 0:
            bot.send_message(message.chat.id, "*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!*", parse_mode='Markdown')
            return
        
        player = get_player_data(message.from_user.id)
        total_cost = amount * 50
        
        if player['dollars'] < total_cost:
            bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
            return
        
        player['dollars'] -= total_cost
        player['bronze_cases'] += amount
        update_player_data(message.from_user.id, player)
        
        bot.send_message(message.chat.id, f"*–í—ã –∫—É–ø–∏–ª–∏* `{amount}` *–±—Ä–æ–Ω–∑–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤ –∑–∞* `{total_cost}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')
        
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å'))
def buy_silver_case(message):
    try:
        parts = message.text.split()
        amount = int(parts[3]) if len(parts) > 3 else 1
        
        if amount <= 0:
            bot.send_message(message.chat.id, "*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!*", parse_mode='Markdown')
            return
        
        player = get_player_data(message.from_user.id)
        total_cost = amount * 100
        
        if player['dollars'] < total_cost:
            bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
            return
        
        player['dollars'] -= total_cost
        player['silver_cases'] += amount
        update_player_data(message.from_user.id, player)
        
        bot.send_message(message.chat.id, f"*–í—ã –∫—É–ø–∏–ª–∏* `{amount}` *—Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –∑–∞* `{total_cost}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')
        
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ö—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å'))
def buy_gold_case(message):
    try:
        parts = message.text.split()
        amount = int(parts[3]) if len(parts) > 3 else 1
        
        if amount <= 0:
            bot.send_message(message.chat.id, "*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!*", parse_mode='Markdown')
            return
        
        player = get_player_data(message.from_user.id)
        total_cost = amount * 300
        
        if player['dollars'] < total_cost:
            bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
            return
        
        player['dollars'] -= total_cost
        player['gold_cases'] += amount
        update_player_data(message.from_user.id, player)
        
        bot.send_message(message.chat.id, f"*–í—ã –∫—É–ø–∏–ª–∏* `{amount}` *–∑–æ–ª–æ—Ç—ã—Ö –∫–µ–π—Å–æ–≤ –∑–∞* `{total_cost}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')
        
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–æ—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å')
def open_bronze_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['bronze_cases'] <= 0:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∑–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤!*", parse_mode='Markdown')
        return
    
    player['bronze_cases'] -= 1
    reward = random.randint(25, 75)
    player['dollars'] += reward
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, f"*–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏* `{reward}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–æ—Ç–∫—Ä—ã—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å')
def open_silver_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['silver_cases'] <= 0:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤!*", parse_mode='Markdown')
        return
    
    player['silver_cases'] -= 1
    reward = random.randint(50, 150)
    player['dollars'] += reward
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, f"*–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏* `{reward}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–æ—Ç–∫—Ä—ã—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å')
def open_gold_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['gold_cases'] <= 0:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –∫–µ–π—Å–æ–≤!*", parse_mode='Markdown')
        return
    
    player['gold_cases'] -= 1
    reward = random.randint(200, 400)
    player['dollars'] += reward
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, f"*–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏* `{reward}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '—á–∞—Å—Ç–Ω—ã–µ —à–∞—Ö—Ç—ã')
def private_mines_info(message):
    text = """*‚õèÔ∏è –ß–∞—Å—Ç–Ω—ã–µ —à–∞—Ö—Ç—ã!*

*1. –ë—Ä–æ–Ω–∑–æ–≤–∞—è —à–∞—Ö—Ç–∞ -* `500`$ *(–¥–ª—è –ø–æ–∫—É–ø–∫–∏: "–ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—É—é —à–∞—Ö—Ç—É")*

*2. –°–µ—Ä–µ–±—Ä—è–Ω–∞—è —à–∞—Ö—Ç–∞ -* `850`$ *(–¥–ª—è –ø–æ–∫—É–ø–∫–∏: "–ö—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—É—é —à–∞—Ö—Ç—É")*

*3. –ó–æ–ª–æ—Ç–∞—è —à–∞—Ö—Ç–∞ -* `1500`$ *(–¥–ª—è –ø–æ–∫—É–ø–∫–∏: "–ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç—É—é —à–∞—Ö—Ç—É")*"""
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–∫—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—É—é —à–∞—Ö—Ç—É')
def buy_bronze_mine(message):
    player = get_player_data(message.from_user.id)
    
    if player.get('bronze_mine', False):
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –±—Ä–æ–Ω–∑–æ–≤–∞—è —à–∞—Ö—Ç–∞!*", parse_mode='Markdown')
        return
    
    if player['dollars'] < 500:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 500
    player['bronze_mine'] = True
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–í—ã –∫—É–ø–∏–ª–∏ –±—Ä–æ–Ω–∑–æ–≤—É—é —à–∞—Ö—Ç—É –∑–∞* `500` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–∫—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—É—é —à–∞—Ö—Ç—É')
def buy_silver_mine(message):
    player = get_player_data(message.from_user.id)
    
    if player.get('silver_mine', False):
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Å–µ—Ä–µ–±—Ä—è–Ω–Ω–∞—è —à–∞—Ö—Ç–∞!*", parse_mode='Markdown')
        return
    
    if player['dollars'] < 850:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 850
    player['silver_mine'] = True
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–í—ã –∫—É–ø–∏–ª–∏ —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—É—é —à–∞—Ö—Ç—É –∑–∞* `850` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–∫—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç—É—é —à–∞—Ö—Ç—É')
def buy_gold_mine(message):
    player = get_player_data(message.from_user.id)
    
    if player.get('gold_mine', False):
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –∑–æ–ª–æ—Ç–∞—è —à–∞—Ö—Ç–∞!*", parse_mode='Markdown')
        return
    
    if player['dollars'] < 1500:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 1500
    player['gold_mine'] = True
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–í—ã –∫—É–ø–∏–ª–∏ –∑–æ–ª–æ—Ç—É—é —à–∞—Ö—Ç—É –∑–∞* `1500` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–∫–æ–ø–∞—Ç—å –≤ —à–∞—Ö—Ç–µ')
def dig_in_mine(message):
    player = get_player_data(message.from_user.id)
    current_time = time.time()
    
    if not any([player.get('bronze_mine', False), player.get('silver_mine', False), player.get('gold_mine', False)]):
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç —á–∞—Å—Ç–Ω—ã—Ö —à–∞—Ö—Ç!*", parse_mode='Markdown')
        return
    
    if current_time - player.get('last_mine_dig', 0) < 120:
        remaining_time = 120 - (current_time - player.get('last_mine_dig', 0))
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        bot.send_message(message.chat.id, f"*–í—ã —É—Å—Ç–∞–ª–∏, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –∫–æ–ø–∞—Ç—å –≤ —à–∞—Ö—Ç–µ —á–µ—Ä–µ–∑* `{minutes}` *–º–∏–Ω—É—Ç* `{seconds}` *—Å–µ–∫—É–Ω–¥*", parse_mode='Markdown')
        return
    
    results = []
    
    if player.get('bronze_mine', False):
        bronze_found = random.randint(1, 10)
        player['bronze'] += bronze_found
        results.append(f"`{bronze_found}` –±—Ä–æ–Ω–∑—ã ü•â")
    
    if player.get('silver_mine', False):
        silver_found = random.randint(1, 10)
        player['silver'] += silver_found
        results.append(f"`{silver_found}` —Å–µ—Ä–µ–±—Ä–∞ ü•à")
    
    if player.get('gold_mine', False):
        gold_found = random.randint(1, 10)
        player['gold'] += gold_found
        results.append(f"`{gold_found}` –∑–æ–ª–æ—Ç–∞ ü™ô")
    
    player['last_mine_dig'] = current_time
    update_player_data(message.from_user.id, player)
    
    result_text = ", ".join(results)
    bot.send_message(message.chat.id, f"*–í—ã –ø–æ–∫–æ–ø–∞–ª–∏ –≤ —Å–≤–æ–∏—Ö —à–∞—Ö—Ç–∞—Ö –∏ –ø–æ–ª—É—á–∏–ª–∏:* {result_text}*!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–∫—Ä–∞—Ñ—Ç—ã')
def crafts_command(message):
    text = """*üî® –ö—Ä–∞—Ñ—Ç –∫–µ–π—Å–æ–≤!*

*–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å* - –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –Ω—É–∂–Ω–æ `5` –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ `25` –∂–µ–ª–µ–∑–∞ *(–ß—Ç–æ–±—ã —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ: "–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å")*

*–ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å* - –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –Ω—É–∂–Ω–æ `25` –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ `50` –±—Ä–æ–Ω–∑—ã *(–ß—Ç–æ–±—ã —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ: "–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å")*

*–°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å* - –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –Ω—É–∂–Ω–æ `50` –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ `50` —Å–µ—Ä–µ–±—Ä–∞ *(–ß—Ç–æ–±—ã —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ: "–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å")*

*–ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å* - –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –Ω—É–∂–Ω–æ `150` –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ `50` –∑–æ–ª–æ—Ç–∞ *(–ß—Ç–æ–±—ã —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ: "–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å")*"""
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å')
def craft_gift_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['dollars'] < 5 or player['iron'] < 25:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ:* `5` *–¥–æ–ª–ª–∞—Ä–æ–≤ –∏* `25` *–∂–µ–ª–µ–∑–∞*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 5
    player['iron'] -= 25
    player['gift_cases'] += 1
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å')
def craft_bronze_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['dollars'] < 25 or player['bronze'] < 50:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ:* `25` *–¥–æ–ª–ª–∞—Ä–æ–≤ –∏* `50` *–±—Ä–æ–Ω–∑—ã*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 25
    player['bronze'] -= 50
    player['bronze_cases'] += 1
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å')
def craft_silver_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['dollars'] < 50 or player['silver'] < 50:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ:* `50` *–¥–æ–ª–ª–∞—Ä–æ–≤ –∏* `50` *—Å–µ—Ä–µ–±—Ä–∞*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 50
    player['silver'] -= 50
    player['silver_cases'] += 1
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å')
def craft_gold_case(message):
    player = get_player_data(message.from_user.id)
    
    if player['dollars'] < 150 or player['gold'] < 50:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ:* `150` *–¥–æ–ª–ª–∞—Ä–æ–≤ –∏* `50` *–∑–æ–ª–æ—Ç–∞*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 150
    player['gold'] -= 50
    player['gold_cases'] += 1
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower().startswith('–¥–∞—Ç—å') and message.reply_to_message)
def give_money(message):
    try:
        amount = float(message.text.split()[1])
        
        if amount <= 0:
            bot.send_message(message.chat.id, "*–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!*", parse_mode='Markdown')
            return
        
        sender_id = message.from_user.id
        receiver_id = message.reply_to_message.from_user.id
        
        if sender_id == receiver_id:
            bot.send_message(message.chat.id, "*–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!*", parse_mode='Markdown')
            return
        
        sender = get_player_data(sender_id)
        receiver = get_player_data(receiver_id)
        
        if sender['dollars'] < amount:
            bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
            return
        
        sender['dollars'] -= amount
        receiver['dollars'] += amount
        
        update_player_data(sender_id, sender)
        update_player_data(receiver_id, receiver)
        
        bot.send_message(message.chat.id, f"*–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏* `{format_number(amount)}` *–¥–æ–ª–ª–∞—Ä–æ–≤ –∏–≥—Ä–æ–∫—É* {receiver['name']}*!*", parse_mode='Markdown')
        
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –î–∞—Ç—å (—Å—É–º–º–∞) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ*", parse_mode='Markdown')



@bot.message_handler(func=lambda message: message.text.lower() == '–∫—É–ø–∏—Ç—å –≤–∏–ø')
def buy_vip(message):
    player = get_player_data(message.from_user.id)
    
    if player['vip']:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP —Å—Ç–∞—Ç—É—Å!*", parse_mode='Markdown')
        return
    
    if player['dollars'] < 1000:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –°—Ç–æ–∏–º–æ—Å—Ç—å VIP:* `1000` *–¥–æ–ª–ª–∞—Ä–æ–≤*", parse_mode='Markdown')
        return
    
    player['dollars'] -= 1000
    player['vip'] = True
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, "*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ VIP —Å—Ç–∞—Ç—É—Å –∑–∞* `1000` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–≤–∏–ø –∫–æ–ø–∞—Ç—å')
def vip_dig(message):
    player = get_player_data(message.from_user.id)
    
    if not player['vip']:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞!*", parse_mode='Markdown')
        return
    
    current_time = time.time()
    
    if current_time - player.get('last_vip_dig', 0) < 90:
        remaining_time = 90 - (current_time - player.get('last_vip_dig', 0))
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        bot.send_message(message.chat.id, f"*–í—ã —É—Å—Ç–∞–ª–∏, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –∫–æ–ø–∞—Ç—å –≤ VIP —à–∞—Ö—Ç–µ —á–µ—Ä–µ–∑* `{minutes}` *–º–∏–Ω—É—Ç* `{seconds}` *—Å–µ–∫—É–Ω–¥*", parse_mode='Markdown')
        return
    
    dollars_found = random.randint(3, 12)
    player['dollars'] += dollars_found
    player['last_vip_dig'] = current_time
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, f"*–í—ã –∑–∞—à–ª–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –≤–∏–ø —à–∞—Ö—Ç—ã, –∏ –≤—ã–∫–æ–ø–∞–ª–∏* `{dollars_found}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '–≤–∏–ø –±–æ–Ω—É—Å')
def vip_bonus(message):
    player = get_player_data(message.from_user.id)
    
    if not player['vip']:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞!*", parse_mode='Markdown')
        return
    
    current_time = time.time()
    
    if current_time - player.get('last_vip_bonus', 0) < 86400:
        remaining_time = 86400 - (current_time - player.get('last_vip_bonus', 0))
        hours = int(remaining_time // 3600)
        minutes = int((remaining_time % 3600) // 60)
        bot.send_message(message.chat.id, f"*–Ø –Ω–µ –±–æ–≥–∞—á, –ø–æ–¥–æ–∂–¥–∏* `{hours}` *—á–∞—Å–æ–≤* `{minutes}` *–º–∏–Ω—É—Ç*", parse_mode='Markdown')
        return
    
    bonus = random.randint(10, 30)
    player['dollars'] += bonus
    player['last_vip_bonus'] = current_time
    update_player_data(message.from_user.id, player)
    
    bot.send_message(message.chat.id, f"üòÑ *–í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP –±–æ–Ω—É—Å:* `{bonus}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text.lower() == '—Ç—Ä–µ–π–¥')
def trade_command(message):
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("‚öíÔ∏è –û–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–æ–≤", callback_data="trade_resources")
    btn2 = telebot.types.InlineKeyboardButton("üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="trade_privileges")
    btn3 = telebot.types.InlineKeyboardButton("üì¶ –ö–µ–π—Å—ã", callback_data="trade_cases")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.send_message(message.chat.id, "*–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤—Å–µ–≥–æ –∫–∞—Ä—å–µ—Ä–∞!*\n*–ó–∞–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª!*", 
                     parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "trade_resources")
def trade_resources_callback(call):
    text = """*–†–∞–∑–¥–µ–ª —Ä–µ—Å—É—Ä—Å–æ–≤!*

`1` –∂–µ–ª–µ–∑–æ ‚öôÔ∏è - `0.2` –¥–æ–ª–ª–∞—Ä–∞ $
`5` –∂–µ–ª–µ–∑–∞ ‚öôÔ∏è - `1` –¥–æ–ª–ª–∞—Ä $
`1` –±—Ä–æ–Ω–∑–∞ ü•â - `0.5` –¥–æ–ª–ª–∞—Ä–æ–≤ $
`2` –±—Ä–æ–Ω–∑—ã ü•â - `1` –¥–æ–ª–ª–∞—Ä–æ–≤ $
`1` —Å–µ—Ä–µ–±—Ä–æ ü•à - `1` –¥–æ–ª–ª–∞—Ä $
`1` –∑–æ–ª–æ—Ç–æ ü•á - `3` –¥–æ–ª–ª–∞—Ä–∞ $

*–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω - –Ω–∞–ø–∏—à–∏—Ç–µ: –û–±–º–µ–Ω—è—Ç—å –∂–µ–ª–µ–∑–æ/–±—Ä–æ–Ω–∑—É/—Å–µ—Ä–µ–±—Ä–æ/–∑–æ–ª–æ—Ç–æ (—Å—É–º–º–∞)*"""
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("‚öíÔ∏è –û–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–æ–≤", callback_data="trade_resources")
    btn2 = telebot.types.InlineKeyboardButton("üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="trade_privileges")
    btn3 = telebot.types.InlineKeyboardButton("üì¶ –ö–µ–π—Å—ã", callback_data="trade_cases")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "trade_privileges")
def trade_privileges_callback(call):
    text = """*–†–∞–∑–¥–µ–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!* üëë

*1. –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è VIP*
*–°—Ç–æ–∏–º–æ—Å—Ç—å - `1000`$*
*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ -> –ü–æ–º–æ—â—å -> VIP*

*2. –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –ê–¥–º–∏–Ω*
*–°—Ç–æ–∏–º–æ—Å—Ç—å - –ë–µ—Å—Ü–µ–Ω–Ω–∞
*–í—ã–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞.*
*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ - –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã.*"""
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("‚öíÔ∏è –û–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–æ–≤", callback_data="trade_resources")
    btn2 = telebot.types.InlineKeyboardButton("üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="trade_privileges")
    btn3 = telebot.types.InlineKeyboardButton("üì¶ –ö–µ–π—Å—ã", callback_data="trade_cases")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "trade_cases")
def trade_cases_callback(call):
    player = get_player_data(call.from_user.id)
    
    text = f"""*–ö–µ–π—Å—ã!*

‚ùóÔ∏è*–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ* `1` *–∫–µ–π—Å–∞ –∑–∞ —Ä–∞–∑!*

*1. –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–µ–π—Å, –º–æ–∂–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤ –±–æ–Ω—É—Å–µ, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['gift_cases']}`

*2. –ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å:* `50`$*, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['bronze_cases']}`

*3. –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å:* `100`$*, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['silver_cases']}`

*4. –ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å:* `300`$*, —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:* `{player['gold_cases']}`

*–ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å - –ö—É–ø–∏—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å (–∫–æ–ª–≤–æ)*
*–ö—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å - –ö—É–ø–∏—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π –∫–µ–π—Å (–∫–æ–ª–≤–æ)*
*–ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å - –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å (–∫–æ–ª–≤–æ)*"""
    
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton("‚öíÔ∏è –û–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–æ–≤", callback_data="trade_resources")
    btn2 = telebot.types.InlineKeyboardButton("üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="trade_privileges")
    btn3 = telebot.types.InlineKeyboardButton("üì¶ –ö–µ–π—Å—ã", callback_data="trade_cases")
    markup.add(btn1)
    markup.add(btn2, btn3)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text.lower().startswith('–∫–∞–∑–∏–Ω–æ'))
def casino_command(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞–∑–∏–Ω–æ (—Å—Ç–∞–≤–∫–∞)*", parse_mode='Markdown')
            return
            
        bet = round(float(parts[1]), 2)
        
        if bet < 5:
            bot.send_message(message.chat.id, "*–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:* `5` *–¥–æ–ª–ª–∞—Ä–æ–≤!*", parse_mode='Markdown')
            return
            
        player = get_player_data(message.from_user.id)
        
        if player['dollars'] < bet:
            bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!*", parse_mode='Markdown')
            return
        
        multipliers = [
            (0, 10), (0.2, 30), (0.5, 30), (1.0, 50),
            (1.2, 30), (1.5, 25), (2.0, 15), (5.0, 5)
        ]
        
        choices = []
        for mult, chance in multipliers:
            choices.extend([mult] * chance)
        
        multiplier = random.choice(choices)
        winnings = round(bet * multiplier, 2)
        
        player['dollars'] -= bet
        player['dollars'] += winnings
        player['dollars'] = round(player['dollars'], 2)
        update_player_data(message.from_user.id, player)
        
        result = "–≤—ã–∏–≥—Ä–∞–ª–∏" if multiplier >= 1.0 else "–ø—Ä–æ–∏–≥—Ä–∞–ª–∏"
        
        text = f"""üë§ *–ò–≥—Ä–æ–∫:* `{player['name']}`
üóù *–°—Ç–∞–≤–∫–∞:* `{format_number(bet)}`
*üç¨ –ú–Ω–æ–∂–∏—Ç–µ–ª—å:* `{format_number(multiplier)}`
üíé *–í—ã {result}!*
*‚ö° –í—ã –ø–æ–ª—É—á–∏–ª–∏:* `{format_number(winnings)}` *–¥–æ–ª–ª–∞—Ä–æ–≤!*"""
        
        bot.send_message(message.chat.id, text, parse_mode='Markdown')
        
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞–∑–∏–Ω–æ (—Å—Ç–∞–≤–∫–∞)*", parse_mode='Markdown')

if __name__ == "__main__":
    bot.polling(none_stop=True)